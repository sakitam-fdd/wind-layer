import{a,W as c,c as d,b as l,r as u,d as f,i as m,f as w,w as p}from"./wind-core.esm.BkKQCIS-.js";import{F as b}from"./wind-core.esm.BkKQCIS-.js";const h=typeof window>"u"?global:window,n=h==null?void 0:h.AMap;if(!n)throw new Error("Before using this plugin, you must first introduce the amap JS API <https://lbs.amap.com/api/javascript-api/summary>");const v={context:"2d",animation:!1,opacity:1,zIndex:12,zooms:[0,22],windOptions:{},fieldOptions:{}};class g{constructor(t,i={}){this.options=a({},v,i),this.canvas=null,this.wind=null,this.init=this.init.bind(this),this.handleResize=this.handleResize.bind(this),this.canvasFunction=this.canvasFunction.bind(this),this.pickWindOptions(),t&&this.setData(t,this.options.fieldOptions)}appendTo(t){if(t)this.init(t);else throw new Error("not map object")}init(t){if(t)this.map=t,this.context=this.options.context||"2d",this.getCanvasLayer(),this.map.on("resize",this.handleResize,this);else throw new Error("not map object")}handleResize(){this.canvas&&this.canvasFunction()}render(t){if(!this.getData())return this;const i=this.getWindOptions();if(t&&!this.wind){const s=this.getData(),e=this.getContext();e&&(this.wind=new c(e,i,s),this.wind.project=this.project.bind(this),this.wind.unproject=this.unproject.bind(this),this.wind.intersectsCoordinate=this.intersectsCoordinate.bind(this),this.wind.postrender=()=>{})}return this.wind&&(this.wind.prerender(),this.wind.render()),this}getCanvasLayer(){if(!this.canvas){const t=this.canvasFunction(),i={canvas:t};this.options.zooms&&(i.zooms=this.options.zooms),"zIndex"in this.options&&typeof this.options.zIndex=="number"&&(i.zIndex=this.options.zIndex,t.style.zIndex=i.zIndex),"opacity"in this.options&&typeof this.options.opacity=="number"&&(i.opacity=this.options.opacity);const s=this.map.getContainer();if(!s){console.error("map container not exit");return}const e=s.querySelector(".amap-layers");e&&e.appendChild(t),this.map.on("mapmove",this.canvasFunction,this),this.map.on("zoomchange",this.canvasFunction,this)}}canvasFunction(){const t=n.Browser.retina?2:1,[i,s]=[this.map.getSize().width,this.map.getSize().height];return this.canvas?(this.canvas.style.width=`${i}px`,this.canvas.style.height=`${s}px`,this.canvas.width=i*t,this.canvas.height=s*t):(this.canvas=d(i,s,t,null),this.canvas.style.position="absolute",this.canvas.style.top="0px",this.canvas.style.left="0px",this.canvas.style.right="0px",this.canvas.style.bottom="0px",this.canvas.style.width=`${i}px`,this.canvas.style.height=`${s}px`),this.canvas&&this.render(this.canvas),this.canvas}_getBounds(){let[t,i]=[void 0,void 0];const s=this.map.getBounds();if(l(n.version,"2.0")>=0)i=s.getNorthEast(),t=s.getSouthWest();else if(this.map.getViewMode_().toLowerCase()==="2d")i=s.getNorthEast(),t=s.getSouthWest();else{const o=s.bounds.map(r=>[r.getLng(),r.getLat()]);t=new n.LngLat(o[3][0],o[3][1]),i=new n.LngLat(o[1][0],o[1][1])}return new n.Bounds(t,i)}removeLayer(){this.map&&(this.wind&&this.wind.stop(),this.map.off("resize",this.handleResize,this),this.map.off("mapmove",this.canvasFunction,this),this.map.off("zoomchange",this.canvasFunction,this),this.canvas&&u(this.canvas),delete this.map,delete this.canvas)}remove(){this.removeLayer()}project(t){const i=n.Browser.retina?2:1,s=this.map.lngLatToContainer(new n.LngLat(t[0],t[1],!0));return[s.x*i,s.y*i]}unproject(t){const i=this.map.containerToLngLat(new n.Pixel(t[0],t[1]));return i?[i.lng,i.lat]:null}intersectsCoordinate(t){return this._getBounds().contains(new n.LngLat(t[0],t[1]))}getContext(){if(this.canvas!==null)return this.canvas.getContext(this.context)}pickWindOptions(){Object.keys(f).forEach(t=>{t in this.options&&(this.options.windOptions===void 0&&(this.options.windOptions={}),this.options.windOptions[t]=this.options[t])})}getData(){return this.field}setData(t,i={}){var s;return t&&t.checkFields&&t.checkFields()?this.field=t:m(t)?this.field=w(t,i):console.error("Illegal data"),this.map&&this.canvas&&this.field&&((s=this==null?void 0:this.wind)==null||s.updateData(this.field),this.render(this.canvas)),this}updateParams(t={}){return p("will move to setWindOptions"),this.setWindOptions(t),this}getParams(){return p("will move to getWindOptions"),this.getWindOptions()}setWindOptions(t){const i=this.options.windOptions||{};this.options=a(this.options,{windOptions:a(i,t||{})}),this.wind&&(this.wind.setOptions(this.options.windOptions),this.wind.prerender())}getWindOptions(){return this.options.windOptions||{}}}const O=g;export{b as Field,O as WindLayer,g as default};
